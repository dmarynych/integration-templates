data:
 -
  attributes:
   tags:
     name: 'arcus outbound'
   destination_override_endpoint: '*'
   entries:
    -
     phase: REQUEST
     operation: ENRICH
     token_manager: PERSISTENT
     public_token_generator: UUID
     transformer: JSON_PATH
     transformer_config:
      - $.login
      - $.password
      - '$.mfa_challenges[*].response'
     transformer_config_map: null
     operations: null
     targets:
      - body
     id_selector: null
     classifiers: {}
     config:
      condition: AND
      rules:
       -
        condition: null
        rules: null
        expression:
         field: ContentType
         type: string
         operator: equals
         values: [application/json]
       -
        condition: OR
        rules:
         - {condition: null, rules: null, expression: {field: Method, type: string, operator: equals, values: [POST]}}
         - {condition: null, rules: null, expression: {field: Method, type: string, operator: equals, values: [PATCH]}}
        expression: null
      expression: null
    -
     phase: REQUEST
     operation: ENRICH
     token_manager: PERSISTENT
     public_token_generator: UUID
     transformer: JSON_PATH
     transformer_config: []
     transformer_config_map: null
     operations: "[ {\n  \"@type\" : \"type.googleapis.com/JavascriptOperationConfig\",\n  \"script\" : \"var VGS = {   process: function(request, ctx) {     var secret = request.headers().get('X-Secret');     var authorization = request.headers().get('Authorization').split(\\\":\\\");     var apiAuth = authorization[0];     request.headers().remove('X-Secret');     request.headers().remove('Authorization');     request.headers().remove('Content-MD5');    request.headers().remove('Date');    if (secret) {       var body  = util.general.getHttpMessageBodyString(request);       var contentMd5 = util.crypt.digest('md5', body);       var d = new Date();       var path = request.uri;       var params = '';       var splitParams = path.split('?');       if (splitParams.length > 1) {         path = splitParams[0];         params = splitParams[1];       }       request.setUri(path);       var date = d.toUTCString();       var data = ['application/json', contentMd5, path, date].join(',');       var hash = util.codecs.b64Encode(util.crypt.hash('SHA1', secret, data));       request.headers().add('Authorization', apiAuth + \\\":\\\" + hash);       request.headers().add('Content-MD5', contentMd5);     request.headers().add('Date', date);     }     return request;   } };\"\n} ]"
     targets:
      - body
     id_selector: null
     classifiers: {}
     config:
      condition: AND
      rules:
       -
        condition: null
        rules: null
        expression:
         field: ContentType
         type: string
         operator: equals
         values: [application/json]
       -
        condition: OR
        rules:
         - {condition: null, rules: null, expression: {field: Method, type: string, operator: equals, values: [POST]}}
         - {condition: null, rules: null, expression: {field: Method, type: string, operator: equals, values: [PATCH]}}
        expression: null
      expression: null
   host_endpoint: 'apix\.(casi)?regalii\.com'
   port: 443
   protocol: http
   source_endpoint: '*'
  type: rule_chain
version: 1